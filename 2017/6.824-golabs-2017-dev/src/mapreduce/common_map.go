package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"io/ioutil"
	"log"
	"os"
)

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	switch solutionVersion {
	case "v1":
		doMapV1(jobName, mapTaskNumber, inFile, nReduce, mapF)
	case "v2":
		doMapV2(jobName, mapTaskNumber, inFile, nReduce, mapF)
	}
	//
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}

func doMapV1(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	// 1 read map input file and call mapF
	contents, err := ioutil.ReadFile(inFile)
	if err != nil {
		log.Fatalf("read map input err: %s, %v", err, inFile)
		return
	}
	mapkvs := mapF(inFile, string(contents))

	// 2 hash map output to reduce task
	// sort by key must read all kvs of single reduce task
	reducekvs := make([][]*KeyValue, nReduce)
	for i := len(mapkvs) - 1; i >= 0; i-- {
		reduceTaskNumber := ihash(mapkvs[i].Key) % nReduce
		reducekvs[reduceTaskNumber] = append(reducekvs[reduceTaskNumber], &mapkvs[i])
	}

	// 3 write mrtmp
	for i, kvs := range reducekvs {
		if kvs == nil {
			continue
		}

		filename := reduceName(jobName, mapTaskNumber, i)
		file, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		if err != nil {
			log.Fatalf("open map output err: %s, %v", err, filename)
			continue
		}

		err = json.NewEncoder(file).Encode(kvs)
		if err != nil {
			log.Fatalf("write map output err: %s, %v", err, filename)
		}
		file.Close()
	}
}

func doMapV2(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	// 1 read map input file and call mapF
	contents, err := ioutil.ReadFile(inFile)
	if err != nil {
		log.Fatalf("read map input err: %s, %v", err, inFile)
		return
	}

	// 2 loop mapF kvs and marshal to mrtmp
	type mrtmpWriter struct {
		enc  *json.Encoder
		file *os.File
	}
	reduceTaskNumber2mrtmpWriter := make(map[int]mrtmpWriter)
	for _, kv := range mapF(inFile, string(contents)) {
		reduceTaskNumber := ihash(kv.Key) % nReduce
		writer, exist := reduceTaskNumber2mrtmpWriter[reduceTaskNumber]
		if !exist {
			filename := reduceName(jobName, mapTaskNumber, reduceTaskNumber)
			file, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
			if err != nil {
				log.Fatalf("open map output err: %s, %v", err, filename)
				continue
			}
			writer = mrtmpWriter{json.NewEncoder(file), file}
			reduceTaskNumber2mrtmpWriter[reduceTaskNumber] = writer
		}
		err := writer.enc.Encode(kv)
		if err != nil {
			log.Fatalf("write map output err: %s, %v", err, reduceTaskNumber)
		}
	}

	// 3 clean up
	for _, writer := range reduceTaskNumber2mrtmpWriter {
		writer.file.Close()
	}
}
